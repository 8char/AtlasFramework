

AtlasUI ||= {}
AtlasUI.ORM ||= {}
AtlasUI.Players ||= {}

if SERVER then
    resource.AddSingleFile( "materials/atlas/closebutton.png" )
    resource.AddSingleFile( "materials/atlas/gradient_lt.png" )
    resource.AddSingleFile( "materials/atlas/loading.png" )
    resource.AddSingleFile( "materials/atlas/next.png" )
    resource.AddSingleFile( "materials/atlas/search.png" )
    resource.AddSingleFile( "materials/atlas/tick.png" )
end

function AtlasUI:CreateFont(name, size, weight, mergeTbl)
	local tbl = {
		font = "Montserrat Medium",
		-- Changing font... to match the old look we had to increase size by two
		size = size + 2,
		weight = weight or 500,
		extended = true
	}

	if (mergeTbl) then
		table.Merge(tbl, mergeTbl)
	end

	surface.CreateFont(name, tbl)
end

function AtlasUI:IncludeClient(path)
	if (CLIENT) then
		include("atlasui/" .. path .. ".lua")
	end

	if (SERVER) then
		AddCSLuaFile("atlasui/" .. path .. ".lua")
	end
end

function AtlasUI:IncludeServer(path)
	if (SERVER) then
		include("atlasui/" .. path .. ".lua")
	end
end

function AtlasUI:IncludeShared(path)
	AtlasUI:IncludeServer(path)
	AtlasUI:IncludeClient(path)
end

AtlasUI:IncludeShared("settings/settings")
hook.Run("AtlasUI.PostLoadSettings")
AtlasUI:IncludeShared("libs/loader")

AtlasUI.Loader()
	:setName("Atlas Framework")
	:setAcronym("Atlas")
	:setDirectory("atlasui")
	:setColor(AtlasUI.Theme.Red)
	:load("libs", ATLASUI_CLIENT, false, {
		ignoreFiles = {
			loader = true
		},
		overwriteRealm = {
			essentials_sh = ATLASUI_SHARED,
			v0n_sh = ATLASUI_SHARED,
			promises = ATLASUI_SHARED,
			permissions = ATLASUI_SHARED
		}
	})
	:load("libs/network", ATLASUI_SHARED)
	:loadFile("server/orm/table_constraint", ATLASUI_SERVER)
	:load("server", ATLASUI_SERVER, true)
	:load("libs/languages/network", {
		client = ATLASUI_CLIENT,
		server = ATLASUI_SERVER
	})
	:load("libs/languages", ATLASUI_SHARED)
	:load("libs/scripts/network", {
		client = ATLASUI_CLIENT,
		server = ATLASUI_SERVER
	})
	:load("libs/scripts", ATLASUI_SHARED)
	:load("libs/configurator/classes", ATLASUI_SHARED, false, {
		overwriteRealm = {
			database = ATLASUI_SERVER
		}
	})
	:load("libs/configurator/network", {
		client = ATLASUI_CLIENT,
		server = ATLASUI_SERVER
	})
	:load("libs/configurator", ATLASUI_SHARED)
	:load("libs/configurator/ui", ATLASUI_CLIENT, true)
	:load("libs/config/network", {
		client = ATLASUI_CLIENT,
		server = ATLASUI_SERVER
	})
	:load("libs/config", ATLASUI_SHARED)
    :load("libs/players/ui", ATLASUI_CLIENT, true)
    :load("libs/players/network", {
        shared = ATLASUI_SHARED,
        client = ATLASUI_CLIENT,
        server = ATLASUI_SERVER
    })
	:load("libs/players", ATLASUI_SHARED, false, {
		overwriteRealm = {
			database = ATLASUI_SERVER
		}	
	})
	:load("elements", ATLASUI_CLIENT)
	:load("core/ui", ATLASUI_CLIENT)
	:load("libs/units", ATLASUI_SHARED, true)
:done()

AtlasUI.Version = "2.1.0"

hook.Run("AtlasUI.PreLoadAddons")
hook.Run("AtlasUI.Loaded")
hook.Run("AtlasUI.PostLoadAddons")
