
 
AtlasUI:CreateFont("AtlasUI.Category.Title", 20)

ATLASUI_LAYOUT_GRID = 1
ATLASUI_LAYOUT_ROW = 2

local PANEL = {}

AccessorFunc(PANEL, "m_topHeight", "TopHeight")
AccessorFunc(PANEL, "m_expanded", "Expanded")
AccessorFunc(PANEL, "m_topColor", "TopColor")
AccessorFunc(PANEL, "m_topColorHover", "TopColorHover")
AccessorFunc(PANEL, "m_topColorActive", "TopColorActive")
AccessorFunc(PANEL, "m_topTextColor", "TopTextColor")
AccessorFunc(PANEL, "m_topTextColorHover", "TopTextColorHover")
AccessorFunc(PANEL, "m_topTextColorActive", "TopTextColorActive")
AccessorFunc(PANEL, "m_rounded", "Rounded")
AccessorFunc(PANEL, "m_icon", "Icon")
AccessorFunc(PANEL, "m_iconSize", "IconSize")
AccessorFunc(PANEL, "m_iconOffset", "IconOffset")
AccessorFunc(PANEL, "m_xOffset", "XOffset")
AccessorFunc(PANEL, "m_name", "Name")
AccessorFunc(PANEL, "m_font", "Font")
AccessorFunc(PANEL, "m_background", "BackgroundColor")
AccessorFunc(PANEL, "m_layoutType", "LayoutType")
AccessorFunc(PANEL, "m_columns", "Columns")
AccessorFunc(PANEL, "m_layoutX", "LayoutX")
AccessorFunc(PANEL, "m_layoutY", "LayoutY")
AccessorFunc(PANEL, "m_layoutPanel", "LayoutPanel")
AccessorFunc(PANEL, "m_columnHeight", "ColumnHeight")
AccessorFunc(PANEL, "m_columnGridHeight", "GridColumnHeight")
AccessorFunc(PANEL, "m_bAnimateChanges", "AnimateChanges", FORCE_BOOL)
AccessorFunc(PANEL, "m_fAnimTime", "AnimTime")
AccessorFunc(PANEL, "m_InstantExpandWidth", "InstantExpandWidth", FORCE_NUMBER)
AccessorFunc(PANEL, "m_categoryColor", "CategoryColor")
AccessorFunc(PANEL, "m_border", "Border", FORCE_NUMBER)

function PANEL:Init()
  self:SetExpanded(false)
  self:SetTopHeight(48)
  self:SetTopColor(AtlasUI.Theme.Primary)
  self:SetTopColorHover(Color(54, 54, 54))
  self:SetTopColorActive(Color(60, 60, 60))
  self:SetTopTextColor(Color(180, 180, 180))
  self:SetTopTextColorHover(Color(210, 210, 210))
  self:SetTopTextColorActive(color_white)
  self:SetRounded(6)
  self:SetXOffset(16)
  self:SetName("UNNAMED CATEGORY")
  self:SetFont("AtlasUI.Category.Title")
  self:SetIcon(nil)
  self:SetIconSize(32)
  self:SetIconOffset(8)
  self:SetBackgroundColor(AtlasUI.Theme.Navbar)
  self:SetBorder(8)
  self:SetLayoutType(ATLASUI_LAYOUT_ROW)
  self:SetColumns(1)
  self:SetColumnHeight(48)
  self:SetLayoutX(8)
  self:SetLayoutY(8)
  self:SetLayoutPanel("DButton")
  self:SetInstantExpandWidth(0)

  self.Top = self:Add("DButton")
  self.Top:Dock(TOP)
  self.Top:SetText("")
  self.Top.textColor = self:GetTopTextColor()
  self.Top.background = self:GetTopColor()
  AtlasUI:DownloadIcon(self.Top, "2QGKAd6")
  self.Top.rotation = 0
  self.Top.OnCursorEntered = function(pnl)
    stopif self:GetExpanded()

    pnl:Lerp("rotation", 180)
    pnl:LerpColor("textColor", self:GetTopTextColorHover())
    pnl:LerpColor("background", self:GetTopColorHover())
  end
  self.Top.OnCursorExited = function(pnl)
    stopif self:GetExpanded()

    pnl:Lerp("rotation", 0)
    pnl:LerpColor("textColor", self:GetTopTextColor())
    pnl:LerpColor("background", self:GetTopColor())
  end
  self.Top.Paint = function(pnl, w, h)
    local roundedBottom = self:GetTall() <= self:GetTopHeight()

    local col = self:GetCategoryColor()
    local xOffset = col and 4 or 0
    if (xOffset > 0) then
      AtlasUI:DrawRoundedBoxEx(self:GetRounded(), 0, 0, w * 0.4, h, col, true, true, roundedBottom, roundedBottom)
    end
    if (col) then
      AtlasUI:DrawRoundedBoxEx(self:GetRounded(), xOffset, 0, w - xOffset, h, pnl.background, !col, true, !col, roundedBottom)
    else
      AtlasUI:DrawRoundedBoxEx(self:GetRounded(), xOffset, 0, w - xOffset, h, pnl.background, !col, true, roundedBottom, roundedBottom)
    end
    local x = self:GetXOffset()
    if (self:GetIcon()) then
      local iconSize = self:GetIconSize()
      surface.SetMaterial(self:GetIcon())
      surface.SetDrawColor(pnl.textColor)
      surface.DrawTexturedRect(self:GetIconOffset(), self:GetIconOffset(), iconSize, iconSize)
      
      x = h
    end

    draw.SimpleText(self:GetName(), self:GetFont(), x, h / 2, pnl.textColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)

    local size = h / 3
    AtlasUI:DrawIconRotated(w - size / 2 - 16, h / 2, size, size, pnl.rotation, pnl, pnl.textColor)
  end
  self.Top.DoClick = function(pnl)
    self:Expand(!self:GetExpanded())
  end

  self:SetAnimTime(0.3)
  self:SetAnimateChanges(false)
  self:SetTall(self.Top:GetTall())
  self.animSlide = Derma_Anim("Anim", self, self.AnimSlide)
end

function PANEL:AnimSlide(anim, delta, data)
    self:InvalidateLayout()
    self:InvalidateParent()

    if (anim.Started) then
      if (IsValid(self.Layout) and self:GetExpanded()) then
        self.Layout:SetVisible(false)
      end

      if (self:GetExpanded()) then
        self:SizeToChildren(false, true)
      else
        self:SetTall(self.Top:GetTall())
      end

      data.to = self:GetTall()
    end

    self:SetTall(AtlasUI:Ease(delta, data.from, data.to - data.from, 1))

    if (anim.Finished) then
      if (IsValid(self.Layout) and !self:GetExpanded()) then
        self.Layout:SetVisible(false)
      end

      return
    end
end

function PANEL:SetLayoutType(type)
  if (IsValid(self.Layout)) then
    self.Layout:Remove()
  end

  local panel = type == ATLASUI_LAYOUT_GRID and "DIconLayout" or "DListLayout"
  self.Layout = self:Add(panel)
  self.Layout:Dock(FILL)
  self.Layout:DockPadding(self:GetBorder(), self:GetBorder(), self:GetBorder(), self:GetBorder())

  if (panel == "DIconLayout") then
    self.Layout:SetBorder(8)
    self.Layout:SetSpaceY(self:GetLayoutX())
    self.Layout:SetSpaceX(self:GetLayoutY())
    self.Layout.PerformLayout = function(pnl, w, h)
      local children = pnl:GetChildren()
      local count = self:GetColumns()
      local amount = (math.max(1, math.floor(#children / count))) * 276 -- Idfk where the 276 is from, it was in the code I took from an earlier project
      local width = w / math.min(count, #children)

      local x = 0
      local y = 0

      local spacingX = pnl:GetSpaceX()
      local spacingY = pnl:GetSpaceY()
      local border = pnl:GetBorder()
      local innerWidth = w - border * 2 - spacingX * (count - 1)

      for i, child in ipairs(children) do
        if (!IsValid(child)) then continue end
      
        child:SetPos(border + x * innerWidth / count + spacingX * x, border + y * child:GetTall() + spacingY * y)
        child:SetSize(innerWidth / count, self:GetGridColumnHeight() or innerWidth / count)

        x = x + 1
        if (x >= count) then
          x = 0
          y = y + 1
        end
      end

      pnl:SizeToChildren(false, true)
    end
  else
    self.Layout:SetTall(self:GetColumnHeight())
  end

  self.m_layoutType = type
end

function PANEL:Expand(state)
  self.Top:LerpColor("textColor", state and self:GetTopTextColorActive() or self:GetTopTextColorHover())
  self.Top:LerpColor("background", state and self:GetTopColorActive() or self:GetTopColorHover())

  local height = state and 48 + self.Layout:GetTall() or 48
  self:SetExpanded(state)

  self.Top.NextHeight = state and self.Top:GetTall() or self:GetTall()
  self.Top:Lerp("NextHeight", height)
  self.invalidateLayout = true

  self:OnToggle(self:GetExpanded())
end

function PANEL:OnToggle(state)
  -- Overwrite
end

function PANEL:CalculateHeight(childrenModifier)
  childrenModifier = childrenModifier or 0
  local children = #self.Layout:GetChildren() + childrenModifier
  local columns = self:GetColumns()
  local spacingX = self.Layout:GetSpaceX()
  local spacingY = self.Layout:GetSpaceY()
  local border = self.Layout:GetBorder()
  local innerWidth = (self:GetInstantExpandWidth() > 0 and self:GetInstantExpandWidth() or self:GetWide()) - border * 2 - spacingX * (columns - 1)
  local columnHeight = innerWidth / columns
  local height = math.ceil(children / columns) * (self:GetLayoutY() + columnHeight) + spacingY

  return 48 + height, children
end

function PANEL:FeedData(tbl, index, expand)
  self.DataTbl = tbl

  for i, v in pairs(tbl) do
    local panel = self.Layout:Add(self:GetLayoutPanel())

    if (self:GetLayoutType() == ATLASUI_LAYOUT_ROW) then
      panel:Dock(TOP)
      panel:DockMargin(0, 0, 0, self:GetLayoutY())
      panel:SetTall(self:GetColumnHeight())
    end

    if (panel.HandleData) then
      panel:HandleData(v, i)
    end
  end

  if (expand) then
    self.Top.textColor = self:GetTopTextColorActive()
    self.Top.background = self:GetTopColorActive()
    self.Top.rotation = 180

    local height = 48
    if (self:GetLayoutType() == ATLASUI_LAYOUT_GRID) then
      local columns = self:GetColumns()
      local spacingX = self.Layout:GetSpaceX()
      local spacingY = self.Layout:GetSpaceY()
      local border = self.Layout:GetBorder()
      local innerWidth = (self:GetInstantExpandWidth() > 0 and self:GetInstantExpandWidth() or self:GetWide()) - border * 2 - spacingX * (columns - 1)
      local columnHeight = innerWidth / columns

      height = height + math.ceil(#tbl / columns) * (self:GetLayoutY() + columnHeight) + spacingY
    elseif (self:GetLayoutType() == ATLASUI_LAYOUT_ROW) then
      local columns = #tbl
      local y = self:GetLayoutY()
      local columnHeight = self:GetColumnHeight()

      height = height + self:GetBorder() + (columns * columnHeight) + (y * (columns - 1)) + self:GetBorder()
    end

    self:SetExpanded(true)
    self.Top.NextHeight = height
    self:InvalidateLayout(true)

    self:OnToggle(true)
  end

  self:InvalidateLayout(true)
end

function PANEL:Paint(w, h)
  draw.RoundedBoxEx(self:GetRounded(), 0, self.Top:GetTall(), w, h - self.Top:GetTall(), self:GetBackgroundColor(), false, false, true, true)
end

function PANEL:Think()
  if (self.invalidateLayout) then
    self:InvalidateLayout()
  end
end

function PANEL:PerformLayout(w, h)
  self.Top:SetTall(self:GetTopHeight())
  self:SetTall(self.Top.NextHeight or self.Top:GetTall())
end

vgui.Register("AtlasUI.Category", PANEL)