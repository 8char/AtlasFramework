public class AtlasUI.Units.Test
  specs = {}

  constructor(name)
    self.name = name
    self.beforeAll = () => end
    self.beforeEach = () => end
    self.afterEach = () => end
    self.afterAll = () => end
  end

  -- Short for specification, 
  addSpec(name, func, args)
    table.insert(self.specs, AtlasUI.Units.Spec(name, func))

    return self
  end

  runSpecFunc(spec)
    local p = AtlasUI.Promises.new()
    
    local success, returnVal = xpcall(spec:getFunc(), debug.traceback, self)
    local result = AtlasUI.Units.Result(spec:getName(), success, returnVal)
  
    if (result:isSuccess()) then
      if (istable(result:getReturn())) then
        result:getReturn():next(() =>
          p:resolve(result:getMessagePrint()) 
        end, (err) =>
          result:setSuccess(false)
          result:setError(err or "Promise failedd")
          p:reject(result:getMessagePrint())
        end)
      else
        p:resolve(result:getMessagePrint())
      end
    else
      p:reject(result:getMessagePrint())
    end

    return p
  end

  setBeforeAll(func) self.beforeAll = func; return self end
  setBeforeEach(func) self.beforeEach = func; return self end
  setAfterEach(func) self.afterEach = func; return self end
  setAfterAll(func) self.afterAll = func; return self end

  finishedTests(dontPrint)
    if (!dontPrint) then
      for i, v in ipairs(self.msgs) do
        table.insert(v, "\n")
        MsgC(unpack(v))
      end
    end
  end

  run(dontPrint)
    self.msgs = {
      { Color(255, 255, 255), `${self.name} should:` }
    }

    local p = AtlasUI.Promises.new()
    -- WARNING: Some recursive meme down here
    local start = SysTime()
    local errors = 0
    local successes = 0
    local size = #self.specs
    local i = 1
    local function nextFunc()
      self:afterEach()
      i++
    end
    local function runTest()
      if (i > size) then  
        self:afterAll() 
        self:finishedTests()

        local ms = math.Round((SysTime() - start) * 1000, 2)
        p:resolve({
          msgs = self.msgs,
          executionTime = ms,
          size = size,
          errors = errors,
          successes = successes
        })
      end

      local tbl = self.specs[i]
      self:beforeEach()
      self:runSpecFunc(tbl):next((result) =>
        successes++

        table.insert(self.msgs, result)

        nextFunc()
        runTest()
      end, (err) =>
        errors++

        table.insert(self.msgs, err)

        nextFunc()
        runTest()
      end)
    end

    local err = self:beforeAll()
    if (istable(err)) then
      -- Promise
      err:next(() =>
        runTest()
      end, (err) =>
        p:reject(err)
      end)
    else
      if (err) then
        return p:reject(err)
      end
      runTest()
    end
    
    return p
  end
end

function AtlasUI:Test(script, printOut = true, delay)
  local p = AtlasUI.Promises.new()
  local tbl = AtlasUI.Scripts:get(script)
  if (!tbl) then
    if (printOut) then MsgC(AtlasUI.Theme.Red, "That script doesn't exist\n") end

    return p:reject("That script doesn't exist")
  end
  local tests = tbl.tests
  if (!istable(tests) or (istable(tests) and #tests == 0)) then
    if (print) then MsgC(AtlasUI.Theme.Red, "There are no tests for this script\n") end
 
    return p:reject("There are no tests for this script")
  end
  
  AtlasUI.IsTesting = script
  local i = 0
  local time = 0
  local passes = 0
  local fails = 0
  local size = 0
  local msgs = {}
  local function nextTest()
    i++

    local promise = tests[i]
    if (!promise) then
      local successRate = math.Round((passes / size) * 100, 2)
      if (printOut) then
        MsgC(AtlasUI.Theme.Yellow, `Took ${time}ms to run ${size} specs with ${passes} passes, ${fails} fails, and a pass rate of ${successRate}%\n`)
      end

      p:resolve({
        time = time,
        passes = passes,
        fails = fails,
        size = size,
        msgs = msgs
      })

      AtlasUI.IsTesting = nil
    else
      promise:run():next((result) =>
        time += result.executionTime
        passes += result.successes
        fails += result.errors
        size += result.size

        table.insert(msgs, result.msgs)

        if (delay) then
          timer.Simple(delay, () => nextTest() end)
        else
          nextTest()
        end
      end, (err) =>
        print("test error", err)
        p:reject(err) 
      end)
    end
  end

  nextTest()

  return p
end

concommand.Add("atlas_test", (ply, cmd, args) =>
  stopif IsValid(ply) and !AtlasUI.Permissions:canAccessFramework(ply)

  AtlasUI:Test(args[1], !tobool(args[2]), tonumber(args[3]))
    :next((result) =>
    
    end, (err) => ErrorNoHalt(err .. "\n") end)
end) 

--[[
local test = AtlasUI.Units.Test("i18n")
  :setBeforeAll(() ->
    self.i18n = AtlasDS.i18n
  end)
  :setAfterAll(() ->
    self.i18n = nil
  end)
  :addSpec("Be able to download the English version", () ->
    return self.i18n.lang:Download("english", true)
  end)
  :addSpec("meme", () ->
    AtlasUI.Units.Assert("meme")
      :shouldEqual("meme2")
  end)


AtlasUI.Units.Test("Atlas")
  :addSpec("Make sure that Hoofy sucks", () =>
    AtlasUI.Units.Assert("xd")
      :isNotNil()
      :shouldEqual("xd")
  end)
  :addSpec("Release Atlas HUD", () =>
    AtlasUI.Units.Assert("atlas_hud")
      :shouldEqual("released")
  end)
  :run(
  --]]
